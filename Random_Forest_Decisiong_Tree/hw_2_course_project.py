# -*- coding: utf-8 -*-
"""Hw_2_course_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DgvWk5EEjQhJVmCKTSerTUQBt4GfpL-d
"""

from numpy.lib.function_base import average
from re import U
from sklearn import tree
from sklearn.model_selection import train_test_split
import pydot
import graphviz
import pandas as pd
import pydotplus
import collections
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import cross_val_score


dataFrame = pd.read_excel('Census_Supplement_HW_2.xlsx', usecols="AA,AE,AJ,P,U")
#print(dataFrame)
y=dataFrame.HAS_DIV
#print(y)
x=dataFrame.drop(["HAS_DIV"],axis=1)
print(x)

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

clf = tree.DecisionTreeClassifier(criterion="gini",max_depth=3) # create a tree object to do classification
clf = clf.fit(X_train,y_train) # train it on this data

score=clf.score(X_test, y_test)

print(score)

y_pred=clf.predict(X_test)

Con_mat=confusion_matrix(y_test,y_pred)

print(Con_mat)

cross_scores=cross_val_score(clf,x,y)

print(average(cross_scores))


def writegraphtofile(clf, featurenames, classnames, pathname):
    dot_data = tree.export_graphviz(clf, out_file=None, feature_names=featurenames, impurity=True, class_names=classnames, filled=True, rounded=True, special_characters=True)
    graph = pydotplus.graph_from_dot_data(dot_data)
    colors = ('lightblue', 'green')
    edges = collections.defaultdict(list)
    for edge in graph.get_edge_list():
      edges[edge.get_source()].append(int(edge.get_destination()))
    for edge in edges:
        edges[edge].sort()
        for i in range(2):
            dest = graph.get_node(str(edges[edge][i]))[0]
            dest.set_fillcolor(colors[i])
    graph.write_png(pathname)




writegraphtofile(clf, x.columns, ("0", "1"), "/content/Census_Supplement_HW_2.xlsx"+"conttree.png")

