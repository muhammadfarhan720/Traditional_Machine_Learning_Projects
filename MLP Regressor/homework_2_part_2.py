# -*- coding: utf-8 -*-
"""Homework 2 part 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L0uwPE5-QkUSbHJ_9_7rgILy8hlbRZv5
"""

from sklearn.metrics._plot.confusion_matrix import confusion_matrix
from numpy.lib.function_base import average
from re import U
from sklearn import tree
from sklearn.model_selection import train_test_split
import pydot
import graphviz
import pandas as pd
import pydotplus
import collections
import matplotlib.pyplot as plt
from sklearn.linear_model import SGDClassifier

from sklearn.metrics import confusion_matrix
from sklearn.metrics import plot_confusion_matrix
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis

from sklearn.metrics import accuracy_score
from sklearn.neural_network import MLPClassifier
from sklearn.datasets import make_classification
from sklearn.preprocessing import MinMaxScaler
import numpy as np

from sklearn.metrics import mean_squared_error
from sklearn.model_selection import validation_curve


dataFrame = pd.read_excel('RawData.xlsx', usecols="A,B,C,D,E,F,G,H,I")


y=dataFrame.F_BIN


x=dataFrame.drop(["F_BIN"],axis=1)

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)

scaler=MinMaxScaler()

X_train=scaler.fit_transform(X_train)

X_test=scaler.transform(X_test)




def skANNModel(X_train, X_test, y_train, y_test):
  # Train model
  doPlot=True
  ann = MLPClassifier(hidden_layer_sizes=3, solver = 'sgd', activation='tanh', alpha=.001, max_iter=2000, random_state=42)

  ann.fit(X_train, y_train.ravel())

  if (doPlot):
    plt.plot(ann.loss_curve_)
    plt.title('training set loss')
    plt.ylabel('loss')
    plt.xlabel('epoch')
    plt.show()

  y_pred = ann.predict(X_test)


  print("SK: {} epochs, {} accuracy score on {} samples of testing data"
        .format(ann.n_iter_, accuracy_score(y_test, y_pred), X_test.shape[0]))

skANNModel(X_train, X_test, y_train, y_test)


def classify():
  pathName = "RawData.xlsx"
  df = pd.read_excel(pathName, usecols="A,B,C,D,E,F,G,H,I")
  X = df.drop(["F_BIN"], axis=1).to_numpy()
  y = df.F_BIN.to_numpy()
  print(X)
  print(y)
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)


  disc = LinearDiscriminantAnalysis(solver='eigen', n_components=1)
  X_lda = disc.fit(X_train, y_train)
  y_model = X_lda.predict(X_test)
  plot_confusion_matrix(X_lda, X_test, y_test)
  print("confusion matrix score = %f" % accuracy_score(y_test,y_model))

classify()