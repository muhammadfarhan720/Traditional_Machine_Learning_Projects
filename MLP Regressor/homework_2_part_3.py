# -*- coding: utf-8 -*-
"""Homework 2 part 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QuntNSM86apRHWJ_5MMgerP1Eev8vZv_
"""

# from numpy.lib.function_base import average
from re import U
from sklearn import tree
from sklearn.model_selection import train_test_split
import pydot
import graphviz
import pandas as pd
import pydotplus
import collections
import matplotlib.pyplot as plt
from sklearn.linear_model import SGDClassifier


import tensorflow as tf
from tensorflow import keras
from keras import layers
from keras.models import Sequential
from keras.layers import Dense

from sklearn.metrics import accuracy_score
from sklearn.neural_network import MLPRegressor
from sklearn.preprocessing import MinMaxScaler
import numpy as np

from sklearn.metrics import mean_squared_error
from sklearn.model_selection import validation_curve




fileName = "Census_Supplement.xlsx"


dataFrame= pd.read_excel(fileName, usecols="I,M,P,R,H")
#X = dataFrame.drop([IDName, targetName], axis=1).to_numpy()
x=dataFrame.drop(["HDIVVAL"],axis=1)
scalerX = MinMaxScaler()
scalerX.fit(x)
x = scalerX.transform(x)
print(type(dataFrame))
print(type(x))

y=dataFrame.drop(["AGI","A_AGE","A_SEX","WKSWORK"],axis=1)
scalerY= MinMaxScaler()
scalerY.fit(y)
y=scalerY.transform(y)
print(type(y))
y=np.ravel(y)

#y.to_numpy()
#y=dataFrame.drop(["HDIVVAL"],axis=1)



#Regression ANN

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=0)
# Solve the problem using an artificial neural network



def tfANNModel(X_train, X_test, y_train, y_test): # using the keras API of TensorFlow

  doPlot=True
  epochs = 100
  inputwidth = X_train.shape[1]
  model = tf.keras.models.Sequential([
  tf.keras.layers.InputLayer(shape=(inputwidth,)),
  tf.keras.layers.Dense(5, activation='tanh'),
  tf.keras.layers.Dense(1, activation='sigmoid')
  ])
  model.compile(optimizer='adam', loss='mean_absolute_error', metrics=['mean_squared_error'])
  history = model.fit(X_train, y_train, epochs=epochs, validation_data=(X_test,y_test), verbose=0)

  if(doPlot):
      plt.plot(history.epoch, history.history["loss"], 'b', label='Training loss')
      plt.plot(history.epoch, history.history['val_loss'], 'r', label='Validation loss' )
      #plt.title('Training loss')
      plt.xlabel('Epochs')
      plt.ylabel('Loss')
      plt.yscale('log')
      plt.legend()
      plt.show()



tfANNModel(X_train, X_test, y_train, y_test)