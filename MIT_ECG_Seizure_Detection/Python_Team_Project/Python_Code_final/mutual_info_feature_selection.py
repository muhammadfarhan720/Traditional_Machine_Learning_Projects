# -*- coding: utf-8 -*-
"""Mutual info feature Selection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14W6oUa3NDN4NYyv4BvCncPibjvpl5SES
"""

!pip install infoselect
import pandas
import numpy as np
import sklearn.impute as impute
import sklearn.preprocessing as preprocessing
import sklearn.model_selection as modelsel
import sklearn.metrics as metrics
import pydotplus
import collections
import io
import infoselect as inf
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import GenericUnivariateSelect
from sklearn.feature_selection import mutual_info_classif
from google.colab import drive 
#drive.mount('/content/gdrive')
from google.colab import files
 
 
uploaded = files.upload()
 # Load data set from file
#df = pandas.read_excel('gdrive/My Drive/final_data/grouped_complete_Siena_new.xlsx')
df = pandas.read_excel(io.BytesIO(uploaded['grouped_complete_Siena_new.xlsx']))
#print(df)
y = df['target'].to_numpy()
print(y)
global X
df=df.drop(['target'],axis=1)
X=df
#X.basedir = r'gdrive/My Drive/'
#print(X)
total_X = df
#print(total_X)

# Examine and replace missing values
imp = impute.SimpleImputer(strategy='median')
imp.fit(total_X)
total_X = imp.transform(total_X)

# Add computed Fields
    # pass
# Normalize
Xscalar = preprocessing.MinMaxScaler(feature_range=(-1,1))
Yscalar = preprocessing.MinMaxScaler(feature_range=(-1,1))
total_X = Xscalar.fit_transform(total_X)
y = Yscalar.fit_transform(y.reshape(-1,1))

#Mutual information
mim = SelectKBest(score_func=mutual_info_classif,k=10)
df_new=pandas.DataFrame(mim.fit_transform(total_X,y))
feature_score=pandas.Series(mim.scores_,index=df.columns)
feature_score.sort_values(ascending=False)

cols = mim.get_support(indices=True)
selected_columns = df.iloc[:,cols].columns.tolist()
selected_columns

#Beta

beta=0.7
J_mifs=0
sum=0
for i in range(len(cols)):
  y1=df[cols[i]]
  x1=df.drop(cols[i],axis=1)
  mim_beta = mim.fit(x1,y1)
  sum = sum + mim_beta.score_
  sum
  x1=df

#https://github.com/felipemaiapolo/infoselect
gmm=inf.get_gmm(total_X, (y.ravel()), y_cat=True)
select=inf.SelectVars(gmm, selection_mode='forward')
select.fit(total_X, (y.ravel()), verbose=True)  
X_new=select.fit_transform(total_X,rd=17)
#select.get_info()