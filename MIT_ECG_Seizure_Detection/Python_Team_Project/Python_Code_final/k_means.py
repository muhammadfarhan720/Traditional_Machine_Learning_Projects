# -*- coding: utf-8 -*-
"""K-means.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xUPecANNfKbpGwWqBAzyirYPn8Xvo-9J
"""

import pandas
import numpy as np
import sklearn.impute as impute
import sklearn.preprocessing as preprocessing
import sklearn.model_selection as modelsel
import sklearn.metrics as metrics
import pydotplus
import collections
import sklearn.cluster as cluster
from sklearn.metrics import silhouette_score
import matplotlib.pyplot as plt
import matplotlib.cm as cm
from scipy.spatial import distance
import math

from google.colab import drive 
drive.mount('/content/gdrive')


# Load data set from file
#df = pandas.read_excel('gdrive/My Drive/final_data/grouped_complete_MIT_new.xlsx',usecols=['P8-O2_ZC','FP1-F7_ complexity','F4-C4_ZC','F3-C3_ISI',
                                                                                             #'F8-T8_ZC','p8-o2_dwtcdvar','fp1-f3_dwtcdent','f8-t8_dwtcdent',
                                                                                             #'T8-P8_ complexity','f3-c3_dwtcdent','CentPar_ISImean'])#'fz-cz_dwtcdrms',
                                                                                             #'FP2-F8_ZC','p4-o2_dwtcaent'])
#df = pandas.read_excel('gdrive/My Drive/final_data/grouped_complete_Siena_new.xlsx',usecols=['T3_Gamma','fp1_dwtcdent','Fc6_Alpha','t4_dwtcdent',
                                                                                             #'f9_dwtcaent','T5_Delta','F9_Alpha','F10_ZC','Occipital_ISImean'])
                                                                                             #'cp5_dwtcdent','Cp5_ZC','T3_ZC','fz_dwtcaent'])
#df = pandas.read_excel('gdrive/My Drive/final_data/grouped_complete_Siena_new.xlsx',usecols=['T4_variance', 'F10_variance', 'O1_ISI', 'T3_ISI', 'T5_ISI', 'P4_ISI',
                                                        #'T6_ISI', '2_ISI', 't5_dwtcavar', 't4_dwtcavar', 'f10_dwtcavar',
                                                        #'f8_dwtcarms', 't4_dwtcarms', 't6_dwtcarms', 'f10_dwtcarms',
                                                        #'t5_dwtcdvar', 't6_dwtcdvar', 'f7_dwtcdrms', 't6_dwtcdrms', 'T4_Theta',
                                                        #'Temporal_Thetamed', 'Temporal_variancemed', 'Temporal_variancemean',
                                                        #'Occipital_ISImed', 'Occipital_ISImean', 'Temporal_ISImed',
                                                        #'Temporal_ISImean', 'CentPar_ISImed', 'CentPar_ISImean',
                                                        #'Temporal_dwtcArmsmean', 'FrontCent_dwtcArmsmed',
                                                        #'FrontCent_dwtcArmsmean', 'Occipital_dwtcDrmsmed',
                                                        #'Occipital_dwtcDrmsmean', 'Temporal_dwtcAvarmed',
                                                        #'Temporal_dwtcAvarmean', 'Temporal_dwtcDvarmed'])
#df = pandas.read_excel('gdrive/My Drive/final_data/grouped_complete_MIT_new.xlsx',usecols= ['T7-P7_variance', 't7-p7_dwtcavar', 'p7-o1_dwtcavar', 'f7-t7_dwtcarms',
                                                        #'t7-p7_dwtcarms', 'F3-C3_ISI', 'C3-P3_ISI', 'P3-O1_ISI', 'CZ-PZ_ISI',
                                                        #'F7-T7_Theta', 'F7-T7_Alpha', 'T7-P7_Theta', 'T7-P7_Alpha',
                                                        #'P7-O1_Theta', 'P7-O1_Alpha', 'TempPar_Thetamed', 'TempPar_Thetamean',
                                                        #'TempPar_Alphamed', 'TempPar_Alphamean', 'CentPar_ISImed',
                                                        #'CentPar_ISImean', 'TempPar_dwtcArmsmed', 'TempPar_dwtcArmsmean',
                                                        #'TempPar_dwtcAvarmed', 'TempPar_dwtcAvarmean'])

df2 = pandas.read_excel('gdrive/My Drive/final_data/grouped_complete_Siena_new.xlsx',usecols=['target'])
featurenames = df.columns.values
X = df[featurenames].to_numpy()
Y=df2['target'].to_numpy()
n_clus=6
clus = cluster.KMeans(init='k-means++',n_clusters=n_clus,random_state=92)
ans = clus.fit_predict(X)
df['cluster'] = ans
print(ans)
print(metrics.accuracy_score(Y, ans))
print(metrics.rand_score(Y, ans))
df2['target'].where(~(df2.target == 0), other=76, inplace=True)
df2['target'].where(~(df2.target == 1), other=0, inplace=True)
df2['target'].where(~(df2.target == 76), other=1, inplace=True)
Y2=df2['target'].to_numpy()
print(metrics.accuracy_score(Y2, ans))
print(metrics.rand_score(Y2, ans))
print(confusion_matrix(y_test_RT, Ypred_RT))