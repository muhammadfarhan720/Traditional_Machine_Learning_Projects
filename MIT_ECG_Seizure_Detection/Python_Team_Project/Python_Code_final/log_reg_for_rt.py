# -*- coding: utf-8 -*-
"""Log reg for RT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QZg4fJQwz7qRjmlncty0pXZU65uRBQKU
"""

import pandas
import numpy as np
import sklearn.impute as impute
import sklearn.preprocessing as preprocessing
import sklearn.model_selection as modelsel
import sklearn.metrics as metrics
import pydotplus
import collections
from sklearn import linear_model as linmod
from sklearn.preprocessing import OneHotEncoder
from sklearn.feature_selection import RFE
from sklearn.model_selection import cross_val_score
from sklearn.metrics import confusion_matrix

from google.colab import drive 
drive.mount('/content/gdrive')




# Load data set from file
df = pandas.read_excel('gdrive/My Drive/final_data/grouped_complete_Siena_new.xlsx',usecols=['2_ISI', 't5_dwtcavar', 't4_dwtcavar', 'f10_dwtcavar',
                                                'f8_dwtcarms', 't4_dwtcarms', 't6_dwtcarms', 'f10_dwtcarms',
                                                't5_dwtcdvar', 't6_dwtcdvar', 'f7_dwtcdrms', 't6_dwtcdrms', 'T4_Theta',
                                                'Temporal_Thetamed', 'Temporal_variancemed', 'Temporal_variancemean',
                                                'Occipital_ISImed', 'Occipital_ISImean', 'Temporal_ISImed',
                                                'Temporal_ISImean', 'CentPar_ISImed', 'CentPar_ISImean',
                                                'Temporal_dwtcArmsmean', 'FrontCent_dwtcArmsmed',
                                                'FrontCent_dwtcArmsmean', 'Occipital_dwtcDrmsmed',
                                                'Occipital_dwtcDrmsmean', 'Temporal_dwtcAvarmed',
                                                'Temporal_dwtcAvarmean', 'Temporal_dwtcDvarmed', 'T3_Gamma','fp1_dwtcdent',
                                                'Fc6_Alpha', 't4_dwtcdent', 'f9_dwtcaent', 'T5_Delta',
                                                'F9_Alpha', 'c4_dwtcdent', 'F10_ZC' , 'cp5_dwtcdent', 'Cp5_ZC', 'T3_ZC',
                                                'F8_Theta','O2_Theta','FrontCent_Thetamed','T5_Delta','Frontal_Thetamean','T3_Delta','target'])
y = df['target'].to_numpy()
df=df.drop('target',axis=1)
global X
X=df 
X.basedir = r'gdrive/My Drive/'
total_X = df.to_numpy()
#print(X)
#print(y)
# Check for data errors and anomalies
# Examine and replace missing values
imp = impute.SimpleImputer(strategy='median')
imp.fit(total_X)
total_X = imp.transform(total_X)



# Add computed Fields
    # pass
# Normalize
Xscalar = preprocessing.MinMaxScaler(feature_range=(-1,1))
Yscalar = preprocessing.MinMaxScaler(feature_range=(-1,1))
total_X = Xscalar.fit_transform(total_X)
y = Yscalar.fit_transform(y.reshape(-1,1))

# Partition into test or training
RANSEED = 42
X_train, X_test, y_train, y_test = modelsel.train_test_split(total_X, y, test_size=0.3, random_state = RANSEED)
# Feature Selection
mlr = linmod.LogisticRegression(max_iter=10000, solver='sag') 
# Train Model   
mlr.fit(X_train, y_train.ravel())
Ypred = mlr.predict(X_test)
print("R2 = %f,  MSE = %f,  Classification Accuracy = %f" %
      (metrics.r2_score(y_test, Ypred), metrics.mean_squared_error(y_test, Ypred), metrics.accuracy_score(y_test, Ypred)))
print("Cross validation scores")
cross_scores=cross_val_score(mlr,X_test,y_test)
print(cross_scores)

#Testing RT
df2 = pandas.read_excel('gdrive/My Drive/final_data/grouped_complete_Siena_RT.xlsx',usecols=[
                                                '2_ISI', 't5_dwtcavar', 't4_dwtcavar', 'f10_dwtcavar',
                                                'f8_dwtcarms', 't4_dwtcarms', 't6_dwtcarms', 'f10_dwtcarms',
                                                't5_dwtcdvar', 't6_dwtcdvar', 'f7_dwtcdrms', 't6_dwtcdrms', 'T4_Theta',
                                                'Temporal_Thetamed', 'Temporal_variancemed', 'Temporal_variancemean',
                                                'Occipital_ISImed', 'Occipital_ISImean', 'Temporal_ISImed',
                                                'Temporal_ISImean', 'CentPar_ISImed', 'CentPar_ISImean',
                                                'Temporal_dwtcArmsmean', 'FrontCent_dwtcArmsmed',
                                                'FrontCent_dwtcArmsmean', 'Occipital_dwtcDrmsmed',
                                                'Occipital_dwtcDrmsmean', 'Temporal_dwtcAvarmed',
                                                'Temporal_dwtcAvarmean', 'Temporal_dwtcDvarmed', 'T3_Gamma','fp1_dwtcdent',
                                                'Fc6_Alpha', 't4_dwtcdent', 'f9_dwtcaent', 'T5_Delta',
                                                'F9_Alpha', 'c4_dwtcdent', 'F10_ZC' , 'cp5_dwtcdent', 'Cp5_ZC', 'T3_ZC',
                                                'F8_Theta','O2_Theta','FrontCent_Thetamed','T5_Delta','Frontal_Thetamean','T3_Delta','target'])
df2.to_csv(r'gdrive/My Drive/RT_Siena_edit.csv',index=False) 
df3= pandas.read_csv('gdrive/My Drive/RT_Siena_edit.csv',usecols=[
                                                '2_ISI', 't5_dwtcavar', 't4_dwtcavar', 'f10_dwtcavar',
                                                'f8_dwtcarms', 't4_dwtcarms', 't6_dwtcarms', 'f10_dwtcarms',
                                                't5_dwtcdvar', 't6_dwtcdvar', 'f7_dwtcdrms', 't6_dwtcdrms', 'T4_Theta',
                                                'Temporal_Thetamed', 'Temporal_variancemed', 'Temporal_variancemean',
                                                'Occipital_ISImed', 'Occipital_ISImean', 'Temporal_ISImed',
                                                'Temporal_ISImean', 'CentPar_ISImed', 'CentPar_ISImean',
                                                'Temporal_dwtcArmsmean', 'FrontCent_dwtcArmsmed',
                                                'FrontCent_dwtcArmsmean', 'Occipital_dwtcDrmsmed',
                                                'Occipital_dwtcDrmsmean', 'Temporal_dwtcAvarmed',
                                                'Temporal_dwtcAvarmean', 'Temporal_dwtcDvarmed', 'T3_Gamma','fp1_dwtcdent',
                                                'Fc6_Alpha', 't4_dwtcdent', 'f9_dwtcaent', 'T5_Delta',
                                                'F9_Alpha', 'c4_dwtcdent', 'F10_ZC' , 'cp5_dwtcdent', 'Cp5_ZC', 'T3_ZC',
                                                'F8_Theta','O2_Theta','FrontCent_Thetamed','T5_Delta','Frontal_Thetamean','T3_Delta','target'])

y_RT = df3['target'].to_numpy()
df3=df3.drop('target',axis=1)
global X_RT
X_RT=df3 
X.basedir = r'gdrive/My Drive/'
total_X_RT = df3.to_numpy()
#prnt(X)
#print(y)
# Check for data errors and anomalies
pass
# Examine and replace missing values
imp = impute.SimpleImputer(strategy='median')
imp.fit(total_X_RT)
total_X_RT = imp.transform(total_X_RT)

# Add computed Fields
    # pass
# Normalize
Xscalar = preprocessing.MinMaxScaler(feature_range=(-1,1))
Yscalar = preprocessing.MinMaxScaler(feature_range=(-1,1))
total_X_RT = Xscalar.fit_transform(total_X_RT)
y_RT = Yscalar.fit_transform(y_RT.reshape(-1,1))
RANSEED = 42
X_train_RT, X_test_RT, y_train_RT, y_test_RT = modelsel.train_test_split(total_X, y, test_size=0.3, random_state = RANSEED)
Ypred_RT = mlr.predict(X_test_RT)

print("R2 = %f,  MSE = %f,  Classification Accuracy = %f" %
      (metrics.r2_score(y_RT, Ypred_RT), metrics.mean_squared_error(y_test_RT, Ypred_RT), metrics.accuracy_score(y_RT, Ypred_RT)))
print("Cross validation scores")
cross_scores=cross_val_score(mlr,total_X_RT,y_RT)
print(cross_scores)
print(confusion_matrix(y_RT, Ypred_RT))